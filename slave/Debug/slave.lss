
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ee  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000488  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   8:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  10:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  14:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  18:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  1c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  20:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  24:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  28:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  2c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  30:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  38:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  3c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  40:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  44:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  48:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  4c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  50:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  54:	73 00       	.word	0x0073	; ????
  56:	77 00       	.word	0x0077	; ????
  58:	7c 00       	.word	0x007c	; ????
  5a:	7e 00       	.word	0x007e	; ????
  5c:	82 00       	.word	0x0082	; ????
  5e:	86 00       	.word	0x0086	; ????
  60:	88 00       	.word	0x0088	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61
  6e:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  72:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000076 <__bad_interrupt>:
  76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007a <main>:
  7a:	87 e0       	ldi	r24, 0x07	; 7
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_init>
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 6a 00 	call	0xd4	; 0xd4 <SPI_clock>
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	84 68       	ori	r24, 0x84	; 132
  8e:	84 bb       	out	0x14, r24	; 20
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_enable>
  98:	0e 94 9e 00 	call	0x13c	; 0x13c <spI_read>
  9c:	81 34       	cpi	r24, 0x41	; 65
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x2a>
  a0:	aa 9a       	sbi	0x15, 2	; 21
  a2:	fa cf       	rjmp	.-12     	; 0x98 <main+0x1e>
  a4:	82 34       	cpi	r24, 0x42	; 66
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x32>
  a8:	aa 98       	cbi	0x15, 2	; 21
  aa:	f6 cf       	rjmp	.-20     	; 0x98 <main+0x1e>
  ac:	83 34       	cpi	r24, 0x43	; 67
  ae:	11 f4       	brne	.+4      	; 0xb4 <main+0x3a>
  b0:	af 9a       	sbi	0x15, 7	; 21
  b2:	f2 cf       	rjmp	.-28     	; 0x98 <main+0x1e>
  b4:	84 34       	cpi	r24, 0x44	; 68
  b6:	11 f4       	brne	.+4      	; 0xbc <main+0x42>
  b8:	af 98       	cbi	0x15, 7	; 21
  ba:	ee cf       	rjmp	.-36     	; 0x98 <main+0x1e>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <SPI_enable>:
	switch(doublespeed){
		case Dseneable :
		SPSR |= (1<<SPE);
		break;
		case DSdisable :
		SPSR &= ~(1<<SPE);
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	19 f0       	breq	.+6      	; 0xcc <SPI_enable+0xa>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	19 f0       	breq	.+6      	; 0xd0 <SPI_enable+0xe>
  ca:	08 95       	ret
  cc:	6e 9a       	sbi	0x0d, 6	; 13
  ce:	08 95       	ret
  d0:	6e 98       	cbi	0x0d, 6	; 13
  d2:	08 95       	ret

000000d4 <SPI_clock>:
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	87 30       	cpi	r24, 0x07	; 7
  d8:	91 05       	cpc	r25, r1
  da:	e8 f4       	brcc	.+58     	; 0x116 <SPI_clock+0x42>
  dc:	86 5d       	subi	r24, 0xD6	; 214
  de:	9f 4f       	sbci	r25, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	0c 94 a2 00 	jmp	0x144	; 0x144 <__tablejump2__>
  e6:	8d b1       	in	r24, 0x0d	; 13
  e8:	8c 7f       	andi	r24, 0xFC	; 252
  ea:	8d b9       	out	0x0d, r24	; 13
  ec:	08 95       	ret
  ee:	68 9a       	sbi	0x0d, 0	; 13
  f0:	8d b1       	in	r24, 0x0d	; 13
  f2:	8c 7f       	andi	r24, 0xFC	; 252
  f4:	8d b9       	out	0x0d, r24	; 13
  f6:	08 95       	ret
  f8:	68 98       	cbi	0x0d, 0	; 13
  fa:	69 9a       	sbi	0x0d, 1	; 13
  fc:	8d b1       	in	r24, 0x0d	; 13
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	8d b9       	out	0x0d, r24	; 13
 102:	70 98       	cbi	0x0e, 0	; 14
 104:	8d b1       	in	r24, 0x0d	; 13
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	8d b9       	out	0x0d, r24	; 13
 10a:	68 9a       	sbi	0x0d, 0	; 13
 10c:	68 9a       	sbi	0x0d, 0	; 13
 10e:	69 98       	cbi	0x0d, 1	; 13
 110:	8d b1       	in	r24, 0x0d	; 13
 112:	83 60       	ori	r24, 0x03	; 3
 114:	8d b9       	out	0x0d, r24	; 13
 116:	08 95       	ret

00000118 <SPI_init>:
	}
}


void SPI_init(int mode){
	switch(mode){
 118:	86 30       	cpi	r24, 0x06	; 6
 11a:	91 05       	cpc	r25, r1
 11c:	19 f0       	breq	.+6      	; 0x124 <SPI_init+0xc>
 11e:	07 97       	sbiw	r24, 0x07	; 7
 120:	39 f0       	breq	.+14     	; 0x130 <SPI_init+0x18>
 122:	08 95       	ret
		case master :
		SPCR |= (1<<MSTR);
 124:	6c 9a       	sbi	0x0d, 4	; 13
		DDRB |= (1<<ss) | (1<<mosi) | (1<<sck);
 126:	87 b3       	in	r24, 0x17	; 23
 128:	80 6b       	ori	r24, 0xB0	; 176
 12a:	87 bb       	out	0x17, r24	; 23
		DDRB &= ~(1<<miso);
 12c:	be 98       	cbi	0x17, 6	; 23
		break;
 12e:	08 95       	ret
		case slave :
		SPCR &= ~(1<<MSTR);   //SPCR |=(1<<MSTR); >>>>>>  SPCR &= ~(1<<MSTR);
 130:	6c 98       	cbi	0x0d, 4	; 13
		DDRB &= ~(1<<mosi);
 132:	bd 98       	cbi	0x17, 5	; 23
		DDRB &= ~(1<<ss);
 134:	bc 98       	cbi	0x17, 4	; 23
		DDRB &= ~(1<<sck);
 136:	bf 98       	cbi	0x17, 7	; 23
		DDRB |=  (1<<miso);
 138:	be 9a       	sbi	0x17, 6	; 23
 13a:	08 95       	ret

0000013c <spI_read>:
	}
}


char spI_read(){
		while(!(SPSR &(1 << SPIF)));
 13c:	77 9b       	sbis	0x0e, 7	; 14
 13e:	fe cf       	rjmp	.-4      	; 0x13c <spI_read>
		return SPDR;
 140:	8f b1       	in	r24, 0x0f	; 15
}
 142:	08 95       	ret

00000144 <__tablejump2__>:
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	05 90       	lpm	r0, Z+
 14a:	f4 91       	lpm	r31, Z
 14c:	e0 2d       	mov	r30, r0
 14e:	09 94       	ijmp

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
