
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ed  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e1  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000482  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  00001927  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   8:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  10:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  14:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  18:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  1c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  20:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  24:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  28:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  2c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  30:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  38:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  3c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  40:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  44:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  48:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  4c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  50:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  54:	70 00       	.word	0x0070	; ????
  56:	74 00       	.word	0x0074	; ????
  58:	79 00       	.word	0x0079	; ????
  5a:	7b 00       	.word	0x007b	; ????
  5c:	7f 00       	.word	0x007f	; ????
  5e:	83 00       	.word	0x0083	; ????
  60:	85 00       	.word	0x0085	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61
  6e:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  72:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000076 <__bad_interrupt>:
  76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007a <main>:

int main(void)
{
    /* Replace with your application code */
	char x;
	SPI_init(slave);
  7a:	87 e0       	ldi	r24, 0x07	; 7
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 89 00 	call	0x112	; 0x112 <SPI_init>
	SPI_clock(fosc128);
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 67 00 	call	0xce	; 0xce <SPI_clock>
	DDRC |= (1<<LED0) | (1<<LED1);
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	84 68       	ori	r24, 0x84	; 132
  8e:	84 bb       	out	0x14, r24	; 20
	SPI_enable(enable);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_enable>
	
	
    while (1) 
    {
		x = spI_read();
  98:	0e 94 9b 00 	call	0x136	; 0x136 <spI_read>
		if (x=='A')
  9c:	81 34       	cpi	r24, 0x41	; 65
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x2a>
		{
			PORTC |= (1<<LED0);
  a0:	aa 9a       	sbi	0x15, 2	; 21
  a2:	fa cf       	rjmp	.-12     	; 0x98 <main+0x1e>
		}
		else if (x=='B')
  a4:	82 34       	cpi	r24, 0x42	; 66
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x32>
		{
			PORTC &= ~(1<<LED0);
  a8:	aa 98       	cbi	0x15, 2	; 21
  aa:	f6 cf       	rjmp	.-20     	; 0x98 <main+0x1e>
		}
		else if (x=='C')
  ac:	83 34       	cpi	r24, 0x43	; 67
  ae:	11 f4       	brne	.+4      	; 0xb4 <main+0x3a>
		{
			PORTC |= (1<<LED1);
  b0:	af 9a       	sbi	0x15, 7	; 21
  b2:	f2 cf       	rjmp	.-28     	; 0x98 <main+0x1e>
		}
		else if (x=='D')
  b4:	84 34       	cpi	r24, 0x44	; 68
  b6:	81 f7       	brne	.-32     	; 0x98 <main+0x1e>
		{
			PORTC &= ~(1<<LED1);
  b8:	af 98       	cbi	0x15, 7	; 21
  ba:	ee cf       	rjmp	.-36     	; 0x98 <main+0x1e>

000000bc <SPI_enable>:
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	19 f0       	breq	.+6      	; 0xc6 <SPI_enable+0xa>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	19 f0       	breq	.+6      	; 0xca <SPI_enable+0xe>
  c4:	08 95       	ret
  c6:	6e 9a       	sbi	0x0d, 6	; 13
  c8:	08 95       	ret
  ca:	6e 98       	cbi	0x0d, 6	; 13
  cc:	08 95       	ret

000000ce <SPI_clock>:
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	87 30       	cpi	r24, 0x07	; 7
  d2:	91 05       	cpc	r25, r1
  d4:	e8 f4       	brcc	.+58     	; 0x110 <SPI_clock+0x42>
  d6:	86 5d       	subi	r24, 0xD6	; 214
  d8:	9f 4f       	sbci	r25, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__tablejump2__>
  e0:	8d b1       	in	r24, 0x0d	; 13
  e2:	8c 7f       	andi	r24, 0xFC	; 252
  e4:	8d b9       	out	0x0d, r24	; 13
  e6:	08 95       	ret
  e8:	68 9a       	sbi	0x0d, 0	; 13
  ea:	8d b1       	in	r24, 0x0d	; 13
  ec:	8c 7f       	andi	r24, 0xFC	; 252
  ee:	8d b9       	out	0x0d, r24	; 13
  f0:	08 95       	ret
  f2:	68 98       	cbi	0x0d, 0	; 13
  f4:	69 9a       	sbi	0x0d, 1	; 13
  f6:	8d b1       	in	r24, 0x0d	; 13
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	8d b9       	out	0x0d, r24	; 13
  fc:	70 98       	cbi	0x0e, 0	; 14
  fe:	8d b1       	in	r24, 0x0d	; 13
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	8d b9       	out	0x0d, r24	; 13
 104:	68 9a       	sbi	0x0d, 0	; 13
 106:	68 9a       	sbi	0x0d, 0	; 13
 108:	69 98       	cbi	0x0d, 1	; 13
 10a:	8d b1       	in	r24, 0x0d	; 13
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	8d b9       	out	0x0d, r24	; 13
 110:	08 95       	ret

00000112 <SPI_init>:
 112:	86 30       	cpi	r24, 0x06	; 6
 114:	91 05       	cpc	r25, r1
 116:	19 f0       	breq	.+6      	; 0x11e <SPI_init+0xc>
 118:	07 97       	sbiw	r24, 0x07	; 7
 11a:	39 f0       	breq	.+14     	; 0x12a <SPI_init+0x18>
 11c:	08 95       	ret
 11e:	6c 9a       	sbi	0x0d, 4	; 13
 120:	87 b3       	in	r24, 0x17	; 23
 122:	80 6b       	ori	r24, 0xB0	; 176
 124:	87 bb       	out	0x17, r24	; 23
 126:	be 98       	cbi	0x17, 6	; 23
 128:	08 95       	ret
 12a:	6c 98       	cbi	0x0d, 4	; 13
 12c:	bd 98       	cbi	0x17, 5	; 23
 12e:	bc 98       	cbi	0x17, 4	; 23
 130:	bf 98       	cbi	0x17, 7	; 23
 132:	be 9a       	sbi	0x17, 6	; 23
 134:	08 95       	ret

00000136 <spI_read>:
 136:	77 9b       	sbis	0x0e, 7	; 14
 138:	fe cf       	rjmp	.-4      	; 0x136 <spI_read>
 13a:	8f b1       	in	r24, 0x0f	; 15
 13c:	08 95       	ret

0000013e <__tablejump2__>:
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	05 90       	lpm	r0, Z+
 144:	f4 91       	lpm	r31, Z
 146:	e0 2d       	mov	r30, r0
 148:	09 94       	ijmp

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
